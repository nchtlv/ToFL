(set-logic QF_NIA)
(define-fun arcMax ((x1 Int) (x2 Int)) Int (ite (> x1 x2) x1 x2))
(define-fun arcSum ((x1 Int) (x2 Int)) Int (ite (= x1 -1) x1 (ite (= x2 -1) x2 (+ x1 x2))))
(define-fun >> ((a Int) (b Int)) Bool (or (> a b) (and (= a -1) (= b -1))))
(declare-fun ah1 () Int)
(declare-fun ah2 () Int)
(declare-fun ah3 () Int)
(declare-fun ah4 () Int)
(declare-fun bh1 () Int)
(declare-fun bh2 () Int)
(declare-fun af1 () Int)
(declare-fun af2 () Int)
(declare-fun af3 () Int)
(declare-fun af4 () Int)
(declare-fun bf1 () Int)
(declare-fun bf2 () Int)
(assert (>> ah1 af1))
(assert (>> ah2 af2))
(assert (>> ah3 af3))
(assert (>> ah4 af4))
(assert (>> bh1 bf1))
(assert (>> bh2 bf2))
(assert (>> af1 a!1))
(assert (>> af2 a!2))
(assert (>> af3 a!3))
(assert (>> af4 a!4))
(assert (>> bf1 b!1))
(assert (>> bf2 b!2))
(assert (>= ah1 0))
(assert (or (>= ah2 0) (= ah2 -1)))
(assert (or (>= ah3 0) (= ah3 -1)))
(assert (or (>= ah4 0) (= ah4 -1)))
(assert (>= bh1 0))
(assert (or (>= bh2 0) (= bh2 -1)))
(assert (>= af1 0))
(assert (or (>= af2 0) (= af2 -1)))
(assert (or (>= af3 0) (= af3 -1)))
(assert (or (>= af4 0) (= af4 -1)))
(assert (>= bf1 0))
(assert (or (>= bf2 0) (= bf2 -1)))
(check-sat)
(get-model)
